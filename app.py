import os
import asyncio
import base64
import json
import logging

import httpx
import uvicorn
from dotenv import find_dotenv, load_dotenv
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.web_app_info import WebAppInfo

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(find_dotenv())

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
app = FastAPI()
menu_data = {}
stoplist_data = {}

# API-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "https://api.sbis.ru/retail/nomenclature/list?"
API_BASE_URL = "https://api.sbis.ru/retail"
SBIS_TOKEN = os.getenv("SBIS_TOKEN")
API_HEADERS = {"X-SBISAccessToken": SBIS_TOKEN}
API_PARAMS = {
    "pointId": 7245,
    "priceListId": 37,
    "withBalance": True,
    "withBarcode": True,
    "onlyPublished": False,
    "page": 0,
    "pageSize": 100,
}

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_image_url(image_param):
    return f"{API_BASE_URL}{image_param}" if image_param else "https://via.placeholder.com/150"

async def fetch_menu():
    global menu_data
    logging.info("–ó–∞–ø—Ä–æ—Å –º–µ–Ω—é –∏–∑ –°–ë–ò–°...")

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(API_URL, params=API_PARAMS, headers=API_HEADERS)
            logging.info(f"–û—Ç–≤–µ—Ç –°–ë–ò–°: {response.status_code}")

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.text}")
                return None

            data = response.json().get("nomenclatures", [])
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤/–∫–∞—Ç–µ–≥–æ—Ä–∏–π")

            categories = {}
            items = {}

            for item in data:
                hierarchical_id = item.get("hierarchicalId")
                parent_id = item.get("hierarchicalParent")

                if item.get("id") is None:  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    categories[hierarchical_id] = {
                        "name": item.get("name"),
                        "subcategories": [],
                        "items": [],
                    }
                else:  # –¢–æ–≤–∞—Ä
                    image_list = item.get("images")

                    if image_list and isinstance(image_list, list) and len(image_list) > 0:
                        image_url = get_image_url(image_list[0])
                        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

                        img_response = await client.get(image_url)

                        if img_response.status_code == 200:
                            img_data = base64.b64encode(img_response.content).decode("utf-8")
                            image_url = f"data:image/jpeg;base64,{img_data}"
                        else:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url}, –∫–æ–¥ {img_response.status_code}")
                            image_url = "https://via.placeholder.com/150"
                    else:
                        logging.info(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item.get('name')}")
                        image_url = "https://via.placeholder.com/150"

                    items[hierarchical_id] = {
                        "id": item.get("id"),  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
                        "name": item.get("name"),
                        "price": item.get("cost"),
                        "description": item.get("description"),
                        "image": image_url,
                        "parent": parent_id,
                    }

            # –°–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
            for item_id, item in items.items():
                if item["parent"] in categories:
                    categories[item["parent"]]["items"].append(item)

            menu_data = categories
            logging.info("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é: {e}")
            return False

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–∞–∫ –ø–æ—Å–ª–µ /start)
def get_start_reply_markup():
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(
                text="open",
                web_app=WebAppInfo(url="https://storied-souffle-8bb402.netlify.app/"),
            )
        ]],
        resize_keyboard=True
    )

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    markup = get_start_reply_markup()
    await message.answer(text="start", reply_markup=markup)
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...")

    success = await fetch_menu()
    if success:
        await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
@dp.message()
async def handle_web_app_data(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App
        data = json.loads(message.web_app_data.data)
        user_id = data.get("user_id", "unknown")  # –ï—Å–ª–∏ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "unknown"
        items = data.get("items", [])  # –ï—Å–ª–∏ items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        delivery_info = data.get("delivery_info", {})  # –ï—Å–ª–∏ delivery_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        logging.info(f"–¢–æ–≤–∞—Ä—ã: {items}")
        logging.info(f"–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_info}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = (
            f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"–ò–º—è: {delivery_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {delivery_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ê–¥—Ä–µ—Å: {delivery_info.get('street', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}, –¥–æ–º {delivery_info.get('house', '–ù–µ —É–∫–∞–∑–∞–Ω')}, –∫–≤ {delivery_info.get('apartment', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        for item in items:
            response_message += f"–¢–æ–≤–∞—Ä ID: {item.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')} - {item.get('price', 0)}‚ÇΩ x {item.get('quantity', 0)}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response_message)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        order_json = json.dumps(data)
        order_encoded = base64.urlsafe_b64encode(order_json.encode()).decode()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑",
                # –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ order_data
                web_app=WebAppInfo(url=f"https://storied-souffle-8bb402.netlify.app/?order_data={order_encoded}")
            )],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")]
        ])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_kb)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.callback_query(lambda c: c.data == "confirm_order")
async def process_confirm_order(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.callback_query(lambda c: c.data == "cancel_order")
async def process_cancel_order(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
    # "–°–±—Ä–∞—Å—ã–≤–∞–µ–º" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = get_start_reply_markup()
    await callback_query.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", reply_markup=markup)
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

# üîó API –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/menu")
async def get_menu():
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ API")
    if not menu_data:
        raise HTTPException(status_code=404, detail="–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return menu_data

@app.get("/stoplist")
async def get_stoplist():
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ API")
    return stoplist_data

@app.get("/image/{filename}")
async def get_image(filename: str):
    file_path = f"images/{filename}"
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# üéØ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_start():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã FastAPI + –±–æ—Ç–∞
async def main():
    bot_task = asyncio.create_task(on_start())
    config = uvicorn.Config(app, host="127.0.0.1", port=8000)
    server = uvicorn.Server(config)
    server_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, server_task)

# üî• –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
