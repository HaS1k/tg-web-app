import os
import asyncio
from fastapi.responses import FileResponse
import httpx
import json
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from fastapi import FastAPI, HTTPException
from dotenv import find_dotenv, load_dotenv
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import base64
import logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(find_dotenv())

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
app = FastAPI()
menu_data = {}
stoplist_data = {}

# API-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "https://api.sbis.ru/retail/nomenclature/list?"
API_BASE_URL = "https://api.sbis.ru/retail"
SBIS_TOKEN = os.getenv("SBIS_TOKEN")
API_HEADERS = {"X-SBISAccessToken": SBIS_TOKEN}
API_PARAMS = {
    "pointId": 7245,
    "priceListId": 37,
    "withBalance": True,
    "withBarcode": True,
    "onlyPublished": False,
    "page": 0,
    "pageSize": 100,
}

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_image_url(image_param):
    return f"{API_BASE_URL}{image_param}" if image_param else "https://via.placeholder.com/150"

async def fetch_menu():
    global menu_data
    logging.info("–ó–∞–ø—Ä–æ—Å –º–µ–Ω—é –∏–∑ –°–ë–ò–°...")

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(API_URL, params=API_PARAMS, headers=API_HEADERS)
            logging.info(f"–û—Ç–≤–µ—Ç –°–ë–ò–°: {response.status_code}")

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.text}")
                return None

            data = response.json().get("nomenclatures", [])
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤/–∫–∞—Ç–µ–≥–æ—Ä–∏–π")

            categories = {}
            items = {}

            for item in data:
                hierarchical_id = item.get("hierarchicalId")
                parent_id = item.get("hierarchicalParent")

                if item.get("id") is None:  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    categories[hierarchical_id] = {
                        "name": item.get("name"),
                        "subcategories": [],
                        "items": [],
                    }
                else:  # –¢–æ–≤–∞—Ä
                    items[hierarchical_id] = {
                        "id": item.get("id"),  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
                        "name": item.get("name"),
                        "price": item.get("cost"),
                        "description": item.get("description"),
                        "parent": parent_id,
                    }

            # –°–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
            for item_id, item in items.items():
                if item["parent"] in categories:
                    categories[item["parent"]]["items"].append(item)

            menu_data = categories
            logging.info("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é: {e}")
            return False

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(
                    text="open",
                    web_app=WebAppInfo(url="https://storied-souffle-8bb402.netlify.app/"),
                )
            ]
        ]
    )
    await message.answer(text="start", reply_markup=markup)
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...")

    success = await fetch_menu()
    if success:
        await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
@dp.message()
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = data.get("user_id")
        items = data.get("items")
        delivery_info = data.get("delivery_info")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = (
            f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"–ò–º—è: {delivery_info['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {delivery_info['phone']}\n"
            f"–ê–¥—Ä–µ—Å: {delivery_info['street']}, –¥–æ–º {delivery_info['house']}, –∫–≤ {delivery_info['apartment']}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in items:
            response_message += f"{item['name']} - {item['price']}‚ÇΩ x {item['quantity']}\n"

        await message.answer(response_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

# üîó API –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/menu")
async def get_menu():
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ API")
    if not menu_data:
        raise HTTPException(status_code=404, detail="–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return menu_data

@app.get("/stoplist")
async def get_stoplist():
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ API")
    return stoplist_data

@app.get("/image/{filename}")
async def get_image(filename: str):
    file_path = f"images/{filename}"
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# üéØ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_start():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã FastAPI + –±–æ—Ç–∞
async def main():
    bot_task = asyncio.create_task(on_start())
    config = uvicorn.Config(app, host="127.0.0.1", port=8000)
    server = uvicorn.Server(config)
    server_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, server_task)

# üî• –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")